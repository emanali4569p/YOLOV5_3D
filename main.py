#!/usr/bin/env python3
"""
ูููุฐุฌ YOLOv5 ูุญุณู ูููุดู ุซูุงุซู ุงูุฃุจุนุงุฏ ุนูู ูุฌููุนุฉ ุจูุงูุงุช KITTI
ุงููุทูุฑ: ูุณุงุนุฏ ุงูุฐูู
ุงููุตู: ูุธุงู ุดุงูู ูููุดู ุนู ุงููุงุฆูุงุช ุซูุงุซูุฉ ุงูุฃุจุนุงุฏ ุจุงุณุชุฎุฏุงู YOLOv5
"""

import os
import sys
import time
from pathlib import Path

def print_banner():
    """ุทุจุงุนุฉ ุดุนุงุฑ ุงููุดุฑูุน"""
    banner = """
    โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
    โ                                                              โ
    โ        ๐ YOLOv5 ูููุดู ุซูุงุซู ุงูุฃุจุนุงุฏ ุนูู KITTI ๐          โ
    โ                                                              โ
    โ  ูุธุงู ูุชูุฏู ูููุดู ุนู ุงููุงุฆูุงุช ุซูุงุซูุฉ ุงูุฃุจุนุงุฏ ูู ุงูุตูุฑ      โ
    โ  ูุฏุนู: ุงูุณูุงุฑุงุชุ ุงููุดุงุฉุ ุงูุฏุฑุงุฌุงุชุ ุงูุดุงุญูุงุช ูุฃูุซุฑ         โ
    โ                                                              โ
    โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
    """
    print(banner)

def check_system():
    """ูุญุต ุงููุธุงู"""
    print("๐ ูุญุต ุงููุธุงู...")
    
    # ูุญุต Python
    python_version = sys.version_info
    print(f"  Python: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    if python_version < (3, 7):
        print("  โ ูุชุทูุจ Python 3.7 ุฃู ุฃุญุฏุซ")
        return False
    
    # ูุญุต PyTorch
    try:
        import torch
        print(f"  PyTorch: {torch.__version__}")
        
        if torch.cuda.is_available():
            print(f"  CUDA: ูุชุงุญ - {torch.cuda.get_device_name(0)}")
        else:
            print("  CUDA: ุบูุฑ ูุชุงุญ - ุณูุชู ุงุณุชุฎุฏุงู CPU")
    except ImportError:
        print("  โ PyTorch ุบูุฑ ูุซุจุช")
        return False
    
    # ูุญุต ุงูุจูุงูุงุช
    data_dir = Path("Data")
    if not data_dir.exists():
        print("  โ ูุฌูุฏ ุงูุจูุงูุงุช ุบูุฑ ููุฌูุฏ")
        return False
    
    required_folders = ["image_2", "label_2", "calib"]
    for folder in required_folders:
        folder_path = data_dir / folder
        if not folder_path.exists():
            print(f"  โ ูุฌูุฏ {folder} ุบูุฑ ููุฌูุฏ")
            return False
        
        files = list(folder_path.glob("*"))
        if len(files) == 0:
            print(f"  โ ูุฌูุฏ {folder} ูุงุฑุบ")
            return False
        
        print(f"  โ {folder}: {len(files)} ููู")
    
    return True

def install_dependencies():
    """ุชุซุจูุช ุงููุชุทูุจุงุช"""
    print("\n๐ฆ ุชุซุจูุช ุงููุชุทูุจุงุช...")
    
    try:
        import subprocess
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("  โ ุชู ุชุซุจูุช ุงููุชุทูุจุงุช ุจูุฌุงุญ")
            return True
        else:
            print(f"  โ ูุดู ูู ุชุซุจูุช ุงููุชุทูุจุงุช: {result.stderr}")
            return False
    except Exception as e:
        print(f"  โ ุฎุทุฃ ูู ุชุซุจูุช ุงููุชุทูุจุงุช: {e}")
        return False

def analyze_data():
    """ุชุญููู ุงูุจูุงูุงุช"""
    print("\n๐ ุชุญููู ุงูุจูุงูุงุช...")
    
    try:
        from analyze_data import analyze_kitti_dataset
        analyze_kitti_dataset()
        print("  โ ุชู ุชุญููู ุงูุจูุงูุงุช ุจูุฌุงุญ")
        return True
    except Exception as e:
        print(f"  โ ุฎุทุฃ ูู ุชุญููู ุงูุจูุงูุงุช: {e}")
        return False

def test_dataset():
    """ุงุฎุชุจุงุฑ ูุฌููุนุฉ ุงูุจูุงูุงุช"""
    print("\n๐งช ุงุฎุชุจุงุฑ ูุฌููุนุฉ ุงูุจูุงูุงุช...")
    
    try:
        from kitti_dataset import KITTIDataset
        
        # ุงุฎุชุจุงุฑ ูุฌููุนุฉ ุงูุชุฏุฑูุจ
        train_dataset = KITTIDataset("Data", split="train", img_size=640)
        print(f"  ูุฌููุนุฉ ุงูุชุฏุฑูุจ: {len(train_dataset)} ุนููุฉ")
        
        # ุงุฎุชุจุงุฑ ูุฌููุนุฉ ุงูุงุฎุชุจุงุฑ
        test_dataset = KITTIDataset("Data", split="test", img_size=640)
        print(f"  ูุฌููุนุฉ ุงูุงุฎุชุจุงุฑ: {len(test_dataset)} ุนููุฉ")
        
        # ุงุฎุชุจุงุฑ ุชุญููู ุนููุฉ
        image, targets = train_dataset[0]
        print(f"  ุชู ุชุญููู ุนููุฉ: {image.shape}, {len(targets)} ูุงุฆู")
        
        return True
    except Exception as e:
        print(f"  โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุจูุงูุงุช: {e}")
        return False

def test_model():
    """ุงุฎุชุจุงุฑ ุงููููุฐุฌ"""
    print("\n๐ค ุงุฎุชุจุงุฑ ุงููููุฐุฌ...")
    
    try:
        from yolo3d_model import create_model
        import torch
        
        model = create_model(nc=9)
        total_params = sum(p.numel() for p in model.parameters())
        print(f"  ุชู ุฅูุดุงุก ุงููููุฐุฌ: {total_params:,} ูุนุงูู")
        
        # ุงุฎุชุจุงุฑ ุชูุฑูุฑ ุงูุฃูุงู
        x = torch.randn(1, 3, 640, 640)
        with torch.no_grad():
            outputs = model(x)
        
        print("  โ ุชู ุงุฎุชุจุงุฑ ุชูุฑูุฑ ุงูุฃูุงู ุจูุฌุงุญ")
        return True
    except Exception as e:
        print(f"  โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงููููุฐุฌ: {e}")
        return False

def train_model():
    """ุชุฏุฑูุจ ุงููููุฐุฌ"""
    print("\n๐ ุจุฏุก ุงูุชุฏุฑูุจ...")
    
    try:
        from train_3d import Trainer3D, create_config
        
        config = create_config()
        trainer = Trainer3D(config)
        
        print("  ุจุฏุก ุงูุชุฏุฑูุจ...")
        trainer.train()
        
        print("  โ ุชู ุงูุชุฏุฑูุจ ุจูุฌุงุญ")
        return True
    except Exception as e:
        print(f"  โ ุฎุทุฃ ูู ุงูุชุฏุฑูุจ: {e}")
        return False

def evaluate_model():
    """ุชูููู ุงููููุฐุฌ"""
    print("\n๐ ุชูููู ุงููููุฐุฌ...")
    
    try:
        from evaluate_3d import Evaluator3D
        
        checkpoint_dir = Path("checkpoints")
        best_model = checkpoint_dir / "best_model.pth"
        
        if not best_model.exists():
            print("  โ ุฃูุถู ูููุฐุฌ ุบูุฑ ููุฌูุฏ")
            return False
        
        config = {'data_dir': 'Data', 'img_size': 640}
        evaluator = Evaluator3D(str(best_model), config)
        
        results = evaluator.evaluate_dataset()
        evaluator.generate_report(results, "evaluation_report.txt")
        
        print("  โ ุชู ุงูุชูููู ุจูุฌุงุญ")
        return True
    except Exception as e:
        print(f"  โ ุฎุทุฃ ูู ุงูุชูููู: {e}")
        return False

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print_banner()
    
    start_time = time.time()
    
    # ูุญุต ุงููุธุงู
    if not check_system():
        print("\nโ ูุดู ูู ูุญุต ุงููุธุงู")
        return
    
    # ุชุซุจูุช ุงููุชุทูุจุงุช
    if not install_dependencies():
        print("\nโ ูุดู ูู ุชุซุจูุช ุงููุชุทูุจุงุช")
        return
    
    # ุชุญููู ุงูุจูุงูุงุช
    if not analyze_data():
        print("\nโ ูุดู ูู ุชุญููู ุงูุจูุงูุงุช")
        return
    
    # ุงุฎุชุจุงุฑ ูุฌููุนุฉ ุงูุจูุงูุงุช
    if not test_dataset():
        print("\nโ ูุดู ูู ุงุฎุชุจุงุฑ ุงูุจูุงูุงุช")
        return
    
    # ุงุฎุชุจุงุฑ ุงููููุฐุฌ
    if not test_model():
        print("\nโ ูุดู ูู ุงุฎุชุจุงุฑ ุงููููุฐุฌ")
        return
    
    # ุชุฏุฑูุจ ุงููููุฐุฌ
    if not train_model():
        print("\nโ ูุดู ูู ุงูุชุฏุฑูุจ")
        return
    
    # ุชูููู ุงููููุฐุฌ
    if not evaluate_model():
        print("\nโ ูุดู ูู ุงูุชูููู")
        return
    
    # ุฅููุงุก ูุงุฌุญ
    end_time = time.time()
    total_time = end_time - start_time
    
    print(f"\n๐ ุชู ุฅููุงู ุฌููุน ุงูููุงู ุจูุฌุงุญ!")
    print(f"โฑ๏ธ  ุงูููุช ุงูุฅุฌูุงูู: {total_time/3600:.2f} ุณุงุนุฉ")
    print(f"๐ ุงููุชุงุฆุฌ ูุญููุธุฉ ูู:")
    print(f"   - ุงูููุงุฐุฌ: checkpoints/")
    print(f"   - ุงูุชูุงุฑูุฑ: evaluation_report.txt")
    print(f"   - ุงูุฑุณูู ุงูุจูุงููุฉ: *.png")

if __name__ == "__main__":
    main()

